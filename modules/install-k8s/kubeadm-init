#!/bin/bash -e
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "0" ]; then
    echo "nothing to be done" >&2
fi

# required as kubeadm will make use of binaries such as kubelet
export PATH=$PATH:/opt/k8s/bin

# Prepare etcdctl command
# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/k8s/bin/etcdctl --cacert $ETCD_CA_FILE --cert $ETCD_CERT_FILE --key $ETCD_KEY_FILE --endpoints $ETCD_ENDPOINTS"

#Cloud provider config on master and workers.
/opt/k8s/cloud-config.sh > /etc/kubernetes/cloud-config

# Node is a master
if [ "$MASTER_MODE" == "1" ]; then
    # generate kubeadm config
    if [ ! -d /etc/kubernetes/kubeadm ]; then
        mkdir -p /etc/kubernetes/kubeadm
    fi
    /opt/k8s/kubeadm_config.yaml.sh > /etc/kubernetes/kubeadm/config.yaml

    # Try to get pki from etcd, if already generated by a previous run of kubeadm
    PKI=$($ETCDCTL_COMMAND get --print-value-only "$PKI_ETCD_KEY")

    # Either we need to generate the pki and store it into the etcd
    # or it is already generated and we need to get it from the etcd
    if [ -z "$PKI" ]; then
        echo "primary master. kubeadm init" >&2
        # kubeadm init
        if ! /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml; then
            echo "primary master kubeadm init failed." >&2
            exit 1
        fi
        echo "Putting bootstrap into etcd." >&2
        # tokens are valid 24h. if scaling worker nodes after this delay
        # dont forget to regenerate a valid token before
        $ETCDCTL_COMMAND put $BOOTSTRAP_TOKEN_ETCD_KEY "$(/opt/k8s/bin/kubeadm token list | tail -n1 | awk '{print $1}')"

        echo "Putting pki into etcd." >&2
        $ETCDCTL_COMMAND put "$PKI_ETCD_KEY" "$(cd /etc/kubernetes/pki && tar -cf - * | base64)"
    else
        echo "pki already in etcd. secondary master" >&2
        mkdir -p /etc/kubernetes/pki
        (cd /etc/kubernetes/pki  && echo -e "$PKI" | base64 -d | tar -xf -)
        if ! /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml; then
            echo "secondary master kubeadm init failed." >&2
            exit 1
        fi
    fi
fi

# Node is a worker only
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "1" ]; then
    # Get bootstrap token from etcd
    TOKEN=$($ETCDCTL_COMMAND get --print-value-only $BOOTSTRAP_TOKEN_ETCD_KEY)
    if [ -z "$TOKEN" ]; then
        echo "No bootstrap token found into etcd" >&2
        exit 1
    fi

    # Join the cluster
    echo "Joining the cluster on endpoint $API_ENDPOINT with token $TOKEN" >&2
    /opt/k8s/bin/kubeadm join --discovery-token-unsafe-skip-ca-verification --token $TOKEN $API_ENDPOINT
fi
